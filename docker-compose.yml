# docker-composeのバージョンを指定
version: "3.9"

# db(MySQL),app(Flask)のコンテナを作成
services:
  db:
    # コンテナ名をmysqlに設定
    container_name: MySQL
    # MySQLのDockerfileをビルドする
    build:
      # ビルドコンテキストはカレントディレクトリ
      context: .
      dockerfile: Docker/MySQL/Dockerfile
    # M1チップでも動くように
    # Intel Macの場合あってもなくても動く
    platform: linux/x86_64
    # DBのボリュームを指定
    # ローカルの/data/dbをコンテナの/var/lib/mysqlにマウントする
    volumes:
      - mysql_data:/var/lib/mysql
    # コンテナ内の環境変数を設定
    environment:
      - MYSQL_ROOT_PASSWORD=root
      - MYSQL_DATABASE=gutara_chat
      - MYSQL_USER=admin
      - MYSQL_PASSWORD=fteam
    # DBのコンテナのヘルスチェックを行う
    # mysqladmin(MySQLサーバーの管理を行うクライアントを使ってDBコンテナ自身(127.0.0.1)にpingを送ってヘルスチェックを行う
    healthcheck:
      test: mysqladmin ping -h 127.0.0.1 -u$$MYSQL_USER -p$$MYSQL_PASSWORD
      # ヘルスチェックのインターバルは10秒
      interval: 10s
      # タイムアウト時間は10秒
      timeout: 10s
      # リトライ回数は3回
      retries: 3
      # ヘルスチェックが失敗しても無視する時間は30秒
      start_period: 30s

  app:
    # コンテナ名をFlaskに設定
    container_name: Flask
    # FlaskのDockerfileをビルドする
    build:
      # ビルドコンテキストはカレントディレクトリ
      context: .
      dockerfile: Docker/Flask/Dockerfile
    # ボリュームを指定
    # ローカルのカレントディレクトリをコンテナの/codeにマウントする
    volumes:
      - ./ChatApp:/code
    # ローカルの5000番ポートとコンテナの5000番ポートをつなぐ
    ports:
      - "5000:5000"
    # uwsgiを実行
    command: uwsgi --ini /code/app.ini 
        
    # 先にdbを起動してからappを起動する
    depends_on:
      db:
        # dbのヘルスチェックが終わってからappを起動させる
        condition: service_healthy

    #コンテナ内でboto3 （AWS CLI)を使うためのアクセスキーを記したファイル

    env_file:
      - .env

  nginx:
    #Dockerfileは作らず、直接イメージ作成
    image: nginx:latest
    container_name: NginX
    ports:
      - "80:80"
    volumes:
      - ./Docker/NginX/nginx.conf:/etc/nginx/conf.d/default.conf

    depends_on:
      - app 

volumes:
  mysql_data:
  
